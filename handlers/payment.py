from aiogram import types, F
import uuid

import keyboards
from database import SessionLocal
from loader import dp, bot
from keyboards.inline.inline_keyboard_markup import main_keyboard
import logging
import requests
from utils.db.queries import get_user
from aiogram.fsm.context import FSMContext


@dp.callback_query(F.data == 'subscription_for_month')
async def subscription(call: types.CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        user = await get_user(session, call.from_user.id)
        if user is None:
            await bot.send_message(call.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É')
            return
    order_id = f'{call.from_user.id}:{uuid.uuid4()}:m'
    link_url = f'C—Å—ã–ª–∫–∞'
    link = requests.get(link_url).text
    await bot.edit_message_text(f'''–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 5000 —Ä—É–±–ª–µ–π.

–ü–ª–∞—Ç–µ–∂ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ.

‚Ñπ –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.
‚Ñπ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏''',
                                call.from_user.id, call.message.message_id,
                                reply_markup=await keyboards.inline.inline_keyboard_markup.btn_month(link))
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass


@dp.callback_query(F.data == 'course_for_a_month')
async def course_for_month(call: types.CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        user = await get_user(session, call.from_user.id)
        if user is None:
            await bot.send_message(call.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É')
            return
    order_id = f'{call.from_user.id}:{uuid.uuid4()}:m'
    link_url = f'–°—Å—ã–ª–∫–∞'
    link = requests.get(link_url).text
    await bot.edit_message_text(f'''–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 5000 —Ä—É–±–ª–µ–π.
    
‚Ñπ –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.
‚Ñπ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏''',
                                call.from_user.id, call.message.message_id,
                                reply_markup=await keyboards.inline.inline_keyboard_markup.btn_month(link))
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass


@dp.callback_query(F.data == 'back_to_start')
async def process_back(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        await bot.edit_message_text("""–ô–æ–≥–∞ –ê–π–µ–Ω–≥–∞—Ä–∞ - –±–µ—Ä–µ–∂–Ω–∞—è –π–æ–≥–∞. –û–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤—Å–µ–º - –¥–∞–∂–µ –Ω–µ –≥–∏–±–∫–∏–º –∏ –ª—é–¥—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –í –ø—Ä–∞–∫—Ç–∏–∫–µ –º—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏ –∏ —Ä–µ–º–Ω–∏. –¢–∞–∫ —á—Ç–æ –ª—é–±–∞—è –∞—Å–∞–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ–ª–æ–≤–µ–∫—É –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ä–∞—Å—Ç—è–∂–∫–∏.

–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–∑–≤–æ–ª—è—Ç —É–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ, —É–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–ª–æ, —Ä–∞–∑–≤–∏—Ç—å –≥–∏–±–∫–∏—Å—Ç—å, —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, —É—Å–ø–æ–∫–æ–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ —É–º, –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –æ—â—É—Ç–∏—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.

–ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–¥—É—Ç –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ. –°–Ω–∞—á–∞–ª–∞ –º—ã –∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å–æ –≤—Å–µ–º–∏ –∞—Å–∞–Ω–∞–º–∏. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —è —Ä–∞–∑–¥–µ–ª–∏–ª–∞ –∏—Ö –Ω–∞ 9 –≥—Ä—É–ø–ø:

üßçüèº‚Äç‚ôÄÔ∏è–ü–æ–∑—ã —Å—Ç–æ—è
üßò‚Äç‚ôÄÔ∏è–ü–æ–∑—ã —Å–∏–¥—è
üíÜüèº‚Äç‚ôÄÔ∏è–ü–æ–∑—ã –ª–µ–∂–∞
üßé‚Äç‚ôÄÔ∏è–°–∫—Ä—É—Ç–∫–∏
ü§æ–ü—Ä–æ–≥–∏–±—ã
üö∂üèº‚Äç‚ôÇÔ∏è–ë–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–∞–∑–∞
üôáüèº‚Äç‚ôÄÔ∏è–ù–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä–µ–¥
ü§∏‚Äç‚ôÇÔ∏è–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–µ –∞—Å–∞–Ω—ã
üèÉ‚Äç‚ôÇÔ∏è–î–∏–Ω–∞–º–∏–∫–∞""",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=main_keyboard)
    except Exception as ex:
        logging.error(ex)


@dp.callback_query(lambda c: c.data == 'video_subscription_for_month')
async def video_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        user = await get_user(session, callback_query.from_user.id)
        if user is None:
            await bot.send_message(callback_query.from_user.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É')
            return

    order_id = f'{callback_query.from_user.id}:{uuid.uuid4()}:m'
    link_url = f''
    link = requests.get(link_url).text

    await bot.send_message(callback_query.from_user.id,
                           f'''–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 5000 —Ä—É–±–ª–µ–π.

–ü–ª–∞—Ç–µ–∂ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ.

‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.
‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏''',
                           reply_markup=await keyboards.inline.inline_keyboard_markup.video_btn_month(link))
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as ex:
        logging.error(ex)
        pass


@dp.callback_query(lambda c: c.data == 'video_course_for_a_month')
async def video_course_for_month(callback_query: types.CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        user = await get_user(session, callback_query.from_user.id)
        if user is None:
            await bot.send_message(callback_query.from_user.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É')
            return

    order_id = f'{callback_query.from_user.id}:{uuid.uuid4()}:m'
    link_url = f''
    link = requests.get(link_url).text

    await bot.send_message(callback_query.from_user.id,
                           f'''–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 5000 —Ä—É–±–ª–µ–π.

‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.
‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏''',
                           reply_markup=await keyboards.inline.inline_keyboard_markup.video_btn_month(link))
    try:
        await bot.answer_callback_query(callback_query.id)
    except Exception as ex:
        logging.error(ex)
        pass
